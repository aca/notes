javascript
==============================================================================
object vs Map:  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map

Function.prototype.bind(fn[, ...])  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind
                             ^ partial application!
  Creates a new function where `this` is set to the given value.
  Example:
    // NB: console.error() expects `this` to be `window.console`.
    foo(…).catch(console.error.bind(console, 'foo: '))

node.js
==============================================================================
globals  https://nodejs.org/api/globals.html#globals_global
  global
  process
  require()
  queueMicrotask(callback)
    "The microtask queue is managed by V8 and may be used in a similar manner to
    the process.nextTick() queue, which is managed by Node.js. The
    process.nextTick() queue is always processed before the microtask queue
    within each turn of the Node.js event loop."

setImmediate(), process.nextTick(), …
  setImmediate executes immediately after the current stack completes (before waiting I/O) and nextTick executes at he end of the next tick (after waiting I/O).
  Use setImmediate if you want to queue the function after whatever I/O event callbacks that are already in the event queue.
    Example: to break up a long running, CPU-bound recursive job, use setImmediate rather than process.nextTick to queue the next iteration (otherwise any I/O event callbacks wouldn't get the chance to run between iterations).
  Use process.nextTick to effectively queue the function at the head of the event queue so that it executes immediately after the current function completes.
    Callbacks passed to process.nextTick will usually be called at the end of the current flow of execution, and are thus approximately as fast as calling a function synchronously. Left unchecked, this would starve the event loop, preventing any I/O from occurring. setImmediates are queued in the order created, and are popped off the queue once per loop iteration. This is different from process.nextTick which will execute process.maxTickDepth queued callbacks per iteration. setImmediate will yield to the event loop after firing a queued callback to make sure I/O is not being starved.

typescript
==============================================================================
https://httptoolkit.tech/blog/5-big-features-of-typescript-3.7/

optional chaining x
  // With TS 3.7:
  // Returns the value is it's all defined & non-null, or undefined if not.
  let result = data?.key1?.key2;
  // The same, through an array index or property, if possible:
  array?.[0]?.['key'];
  // Call a method, but only if it's defined:
  obj.method?.();
  // Get a property, or return 'default' if any step is not defined:
  let result = data?.key1?.key2 ?? 'default';
  // GOTCHA: returns undefined for missing values, even if they were null.
  (null)?.key  // returns undefined
