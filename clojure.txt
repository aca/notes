quick start: https://news.ycombinator.com/item?id=9806126
    "Making an API in Clojure using Swagger gives you a full, interactive UI
    and documentation for your API, while also having a schema which makes sure
    you know what is submitted and that it validates."
    Making a Swagger app with Luminus is as simple as:
        lein new luminus myapp +swagger
        cd myapp
        lein run
    once the server starts, browse to
        http://localhost:3000/swagger-ui/index.html
    to see your Swagger API

quick start screencast (eclipse, ring)
    http://www.youtube.com/watch?v=VVd4ow-ZcX0

todo:
    https://www.stuttaford.me/2018/02/18/a-clojure-learning-journey/
    The Re-frame Guide https://purelyfunctional.tv/guide/re-frame-building-blocks/
    ClojureScript for Skeptics - Derek Slager: https://www.youtube.com/watch?v=gsffg5xxFQI
    https://howistart.org/posts/clojure/1
    http://www.blaenkdenum.com/notes/clojure/
    Migrating a Leiningen Project to Boot (michielborkent.nl): https://news.ycombinator.com/item?id=9671106

web:
  https://github.com/Day8/re-frame
    Reagent Framework For Writing SPAs, in Clojurescript.

boot:
  https://news.ycombinator.com/item?id=13399073
    My current CLJS setup is boot with boot-cljs, boot-reload and boot-cljs-repl. They're configured using normal Clojure code in a build.boot file and the entry points are configured in live-reloadable *.edn files.
    That setup is simpler and far more powerful than anything else I've seen in other languages.
    I was using leiningen previously but boot proved to be more powerful for less work in my case.
    https://github.com/boot-clj/boot
    https://github.com/boot-clj/boot-cljs
    https://github.com/adzerk-oss/boot-reload
    https://github.com/adzerk-oss/boot-cljs-repl

style/idioms:
    https://github.com/bbatsov/clojure-style-guide

tutorial
    http://www.youtube.com/user/Misophistful/videos

book:
    https://github.com/clojure-cookbook/clojure-cookbook

AMAZING
    http://himera.herokuapp.com/synonym.html
    http://cjohansen.no/clojure-to-die-for

http://clojure.org/cheatsheet

amazing book/tutorial:
    http://www.braveclojure.com/

deploy CLI app:
    http://yobriefca.se/blog/2014/03/02/building-command-line-apps-with-clojure/
    http://www.rkn.io/2014/02/27/clojure-cookbook-command-line-args/

web app:
    http://blog.josephwilk.net/clojure/building-clojure-services-at-scale.html
    https://github.com/jalehman/react-tutorial-om
    static site generation: http://cjohansen.no/building-static-sites-in-clojure-with-stasis

datomic discussion and video link:
    http://www.reddit.com/r/Clojure/comments/1t6h2v/datomicjunk_a_bunch_of_datomic_utility_functions/

datomic
    https://augustl.com/blog/2018/datomic_look_at_all_the_things_i_am_not_doing/

Solving the Expression Problem with Clojure 1.2
    http://www.ibm.com/developerworks/java/library/j-clojure-protocols/index.html#datatypes

macros: http://aphyr.com/posts/305-clojure-from-the-ground-up-macros

http://thinkrelevance.com/blog/2013/06/04/clojure-workflow-reloaded

FUNDAMENTALS
    let is evaluated immediately
        all let-defined symbols are replaced with their corresponding values,
        then then expression is evaluated
    Functions represent unrealized computation: expressions not yet evaluated, or incomplete.
        functions exist to defer evaluation
        parameters are unbound symbols
        invoking a function binds values to those symbols

    if we put a quote in front of the expression, it will no longer be evaluated.
        '(red "nut1") ;;=> (red "nut1")
    quoting the expression turns it into a list, which we can manipulate with
    other s-expressions (code as data).
        (first '(red "nut1")) ;;=> red
        (last '(red "nut1")) ;;=> "nut1"

    STATE   https://aphyr.com/posts/306-clojure-from-the-ground-up-state
        Type       Mutability    Reads          Updates         Evaluation    Scope
        ---------------------------------------------------------------------------
        Symbol     Immutable     Transparent                                  Lexical
        Var        Mutable       Transparent    Unrestricted                  Global/Dynamic
        Delay      Mutable       Blocking       Once only       Lazy
        Future     Mutable       Blocking       Once only       Parallel
        Promise    Mutable       Blocking       Once only
        Atom       Mutable       Nonblocking    Linearizable
        Ref        Mutable       Nonblocking    Serializable

PATTERNS
    get values of a nested map (without worrying about nil):
        (get-in foo-map [:key1 :nestedkey1 :nestedkey2])
    modify ALL keys of a nested map (nil intermediates will be stubbed):
        (update-in me [:address :street] #(str "33 " %))

PHILOSOPHY
- This classic got Clojure on the map for many people:
      Are We There Yet? www.infoq.com/presentations/Are-We-There-Yet-Rich-Hickey
- Simple Made Easy
      http://www.infoq.com/presentations/Simple-Made-Easy-QCon-London-2012
- Simplicity Ain't Easy - Stuart Halloway - https://www.youtube.com/watch?v=cidchWg74Y4
- Ousterhout's Dichotomy Isn't (Part 2 of the Simplicity/Power/Focus Series) - Stuart Halloway
      https://www.youtube.com/watch?v=cidchWg74Y4

LOGGING
    pretty-print any expression  http://emacsninja.com/posts/fixing-my-annoyance-with-clojure.html
        (defn dbg
          ([thing]
           (dbg "XXX" thing))
          ([prefix thing]
           (println prefix)
           (print (with-out-str (clojure.pprint/pprint thing)))
           thing))

LIBRARIES
    specter (like Haskell "Lens"): composable navigation
        http://nathanmarz.com/blog/clojures-missing-piece.html
        https://github.com/nathanmarz/specter
    http://blog.korny.info/2014/03/08/xml-for-fun-and-profit.html#zippers
    clojure.zip/xml-zip => like xpath
